from base import *
from disnake.ext import commands
from disnake import TextInputStyle, ModalInteraction
from discord_webhook import DiscordWebhook, DiscordEmbed
import disnake
from dotenv import load_dotenv
from config import *
from logic.get_data import *


class Isk_Modal_Cl(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ê–∫—Ü–∏–π",
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
                custom_id="field",
                style=TextInputStyle.paragraph
            )
        ]
        super().__init__(title="üóëÔ∏èCleaningüóëÔ∏è", components=components)

    async def callback(self, interaction: ModalInteraction):

        query = 0
        for el in interaction.text_values["field"].split(' '):
            if el.upper() in [x[0] for x in await Get().fetchall("SELECT * FROM EXCLUSION_LIST")]:
                query = query + 1
                await Get().change_data("DELETE FROM EXCLUSION_LIST WHERE LIST = (%s)", (el.upper(),))
        await interaction.send(f"‚ùåDelete {query} element‚úÖ")


class Iskl_Modal(disnake.ui.Modal):

    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="Exclusin Shares",
                placeholder="Enter shares name",
                custom_id="field",
                style=TextInputStyle.paragraph
            )
        ]
        super().__init__(title="‚ûïAdd‚ûï", components=components)

    async def callback(self, interaction: ModalInteraction):
        query = 0
        for el in interaction.text_values["field"].split(' '):

            if el.upper() not in [x[0] for x in await Get().fetchall("SELECT * FROM EXCLUSION_LIST")]:
                if el.upper() in shares['ticker'].values:
                    query = query + 1
                    await Get().change_data("INSERT INTO EXCLUSION_LIST VALUES (%s) ",(el.upper(),))

        await interaction.send(f"üíæAdd {query} element‚úÖ")


class Add(disnake.ui.View):
    @disnake.ui.button(label="‚ûïAdd‚ûï", style=disnake.ButtonStyle.success)
    async def add(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.message.delete()
        await interaction.response.send_modal(modal=Iskl_Modal())

    @disnake.ui.button(label="‚ùåDelete‚ùå", style=disnake.ButtonStyle.danger)
    async def del_one_more(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.message.delete()
        await interaction.response.send_modal(Isk_Modal_Cl())

    @disnake.ui.button(label="üõëDelete ALLüõë", style=disnake.ButtonStyle.danger)
    async def del_all(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.message.delete()
        await Get().change_data("DELETE FROM EXCLUSION_LIST")
        await interaction.send("‚úÖ Clear ‚úÖ")


class All_off(disnake.ui.View):
    @disnake.ui.button(label="‚ö°–í—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å‚ö°", style=disnake.ButtonStyle.danger)
    async def stop_btn_2(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.message.delete()

        await Get().change_data("UPDATE ACCOUNT_INFO SET BOT_WORK = True ")

        await interaction.channel.send("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚úã")


class StartBot(disnake.ui.View):
    @disnake.ui.button(label="üÜï–ó–∞–ø—É—Å—Ç–∏—Ç—åüÜï", style=disnake.ButtonStyle.success)
    async def start_btn(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.message.delete()
        await Get().change_data("UPDATE ACCOUNT_INFO SET BOT_WORK = True")
        await interaction.channel.send("–ë–æ—Ç –ó–∞–ø—É—â–µ–Ω, –¥–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å –≤–∞–º–∏ –ø—Ä–∏–±—ã–ª—åüìà")


class StopBot(disnake.ui.View):
    @disnake.ui.button(label="üõë–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—åüõë", style=disnake.ButtonStyle.danger)
    async def stop_btn(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.message.delete()
        if await Get().fetchone("SELECT * FROM DEALS") is None:
            await Get().change_data("UPDATE ACCOUNT_INFO SET BOT_WORK = True ")
            await interaction.channel.send("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚úã")
        else:
            await interaction.channel.send(
                "–ï—Å—Ç—å –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏,–µ—Å–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –æ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ ,–Ω–æ –≤ –Ω–æ–≤—ã–µ –≤—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥–µ—Ç",
                view=All_off())


class Menu(disnake.ui.View):
    @disnake.ui.button(label="üìñActive Dealsüìñ", style=disnake.ButtonStyle.success)
    async def active_deal_btn(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.message.delete()
        if await Get().fetchone("SELECT * FROM DEALS") is None:
            await interaction.channel.send("‚ùåNo active trades‚ùå")
        else:
            load_dotenv('.env')
            deal = DiscordWebhook(url=os.getenv('DISCORD_WEBHOOK'))
            embed = DiscordEmbed(title="üìñActive Dealsüìñ", color="ff00ff")

            for index, el in enumerate(await Get().fetchall("SELECT * FROM DEALS")):
                value = f"{index + 1}  Ticker : {el[0]}  Buyprice : {el[2]}  Quantity :  {el[1]}"
                embed.add_embed_field(name="", value=value, inline=False)
            deal.add_embed(embed)
            resource = deal.execute()

    @disnake.ui.button(label="‚ùåExclusion list‚ùå", style=disnake.ButtonStyle.success)
    async def iskl(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.message.delete()
        if await Get().fetchone("SELECT * FROM EXCLUSION_LIST") is None:
            await interaction.channel.send("‚ùåEmpty‚ùå", view=Add())
        else:
            load_dotenv('.env')
            deal = DiscordWebhook(url=os.getenv('DISCORD_WEBHOOK'))
            embed = DiscordEmbed(title="‚ùåExclusion list‚ùå", color="DC143C")
            value = ''
            for i, e in enumerate(await Get().fetchall("SELECT * FROM EXCLUSION_LIST")):
                value = f"{value} {e[0]}"
            embed.add_embed_field(name='', value=value, inline=False)
            embed.set_thumbnail(url=urls['exclusion'])

            deal.add_embed(embed)
            resource = deal.execute()
            await interaction.channel.send(view=Add())

    @disnake.ui.button(label="üìùStatistic‚úçÔ∏è", style=disnake.ButtonStyle.success)
    async def stat(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.message.delete()
        load_dotenv('.env')
        deal = DiscordWebhook(url=os.getenv('DISCORD_WEBHOOK'))
        embed = DiscordEmbed(title="Statistic", color="FF0000")

        for index, el in enumerate(await Get().fetchall("SELECT * FROM ACCOUNT_INFO")):

            embed.add_embed_field(name="üí∞–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—åüí∞", value=f"{round(el[2],3)}", inline=False)
            embed.add_embed_field(name="‚ûï–ö–æ–ª-–≤–æ —Å–¥–µ–ª–æ–∫‚ûï ", value=f"{el[1]}", inline=False)
            embed.set_thumbnail(url=urls['stat'])

        deal.add_embed(embed)
        resource = deal.execute()

